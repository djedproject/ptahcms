from datetime import datetime
from pyramid.view import view_config
from pyramid.httpexceptions import HTTPFound, HTTPNotFound, HTTPForbidden

import ptah
import ptahcms

@view_config(
    route_name='home',
    renderer=ptah.layout('{{package}}:homepage.lt', 'master')
)
class HomepageView(ptah.View):
    """ Your homepage welcome site """


@view_config(
    context=ptahcms.Content,
    permission=ptahcms.View,
    renderer=ptah.layout('ptahcms:contentview.lt'))
class DefaultContentView(ptahcms.form.Form):
    """ Default content view """

    readonly = True

    @property
    def fields(self):
        return self.context.__type__.fieldset

    def form_content(self):
        data = {}
        for name, field in self.context.__type__.fieldset.items():
            data[name] = getattr(self.context, name, field.default)

        return data


@view_config(
    name='edit.html',
    context=ptahcms.Content,
    permission=ptahcms.ModifyContent,
    renderer=ptah.layout())
class EditForm(ptahcms.EditForm):
    """ Default content edit form """


@view_config(
    context=ptahcms.Container,
    permission=ptahcms.View,
    renderer=ptah.layout('ptahcms:listing.lt'))
@view_config(
    name='contents.html',
    context=ptahcms.Container,
    permission=ptahcms.ModifyContent,
    renderer=ptah.layout('ptahcms:listing.lt'))
class ContainerListing(ptah.View):
    """ Default container listing view """

    def update(self):
        context = self.context
        request = self.request
        registry = request.registry

        self.deleteContent = ptah.check_permission(
            ptahcms.DeleteContent, context)

        # cms(uri).read()
        # cms(uri).create(type)
        # cms(uri).delete()
        # cms(uri).update(**kwargs)
        # cms(uri).items(offset, limit)

        if self.deleteContent and 'form.buttons.remove' in request.POST:
            uris = self.request.POST.getall('item')
            for uri in uris:
                ptahcms.wrap(uri).delete()

                self.request.add_message("Selected content items have been removed.")


@view_config(
    name='rename.html', context=ptahcms.Content,
    permission=ptahcms.RenameContent,
    renderer=ptah.layout())
class RenameForm(ptahcms.RenameForm):
    """ Default content rename form """


@view_config(
    name='delete.html', context=ptahcms.Content,
    permission=ptahcms.DeleteContent,
    renderer=ptah.layout())
class DeleteForm(ptahcms.DeleteForm):
    """ Default content delete form """


@view_config(
    name='share.html', context=ptah.ILocalRolesAware,
    permission=ptahcms.ShareContent,
    renderer=ptah.layout('ptahcms:sharing.lt'))
class ShareForm(ptahcms.ShareForm):
    """ Default share form """


@view_config(
    name='add.html', context=ptahcms.Container,
    permission=ptahcms.AddContent,
    renderer=ptah.layout())

class AddForm(ptahcms.AddForm):
    """ Default content add form """

    def __init__(self, context, request):
        tname = request.params.get('tname', None)
        tinfo = ptah.resolve('type:%s' % tname)

        if not tinfo:
            raise HTTPNotFound()
        if tinfo.addview:
            raise HTTPNotFound()
        if not tinfo in context.__type__.list_types(context):
            raise HTTPForbidden()

        self.tinfo = tinfo

        super(AddForm, self).__init__(context, request)
